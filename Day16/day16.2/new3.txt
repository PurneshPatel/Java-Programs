Desc of FileInputStream --- java.io.FileInputStream 
bin i/p stream connected to file device(bin/char) -- to read data.
Desc of FileOutputStream --- java.io.FileOutputStream 
bin o/p stream connected to file device(bin/char) -- to write data.
char i/p stream connected to file device(char) -- to read data.
char o/p stream connected to file device(char) -- to write data.
Objective --- Read data from text file in buffered manner.
1. java.io.FileReader(String fileName) throws FileNotFoundException
--- Stream class to represent unbuffered char data reading from a text file.
Has methods -- to read data using char/char[]
eg -- public int read() throws IOException
public int read(char[] data) throws IOException
public int read(char[] data,int offset,int noOfChars) throws IOException
1.5 FileReader(File f) throws FileNotFoundException
java.io.File -- class represents path to file or a folder.
2. Improved version -- Buffered data read .
For char oriented streams--- java.io.BufferedReader(Reader r)
String readLine() --- reads data from a buffer in line by line manner-- & rets null at end of Stream condition.
Objective -- Replace JDK 1.6 try-catch-finally BY JDK 1.7 try-with-resources syntax.
Meaning --- From Java SE 7 onwards --- Introduced java.lang.AutoCloseable -- i/f
It represents --- resources that must be closed -- when no longer required.
public void close() throws Exception-- closing resources.
java.io --- classes -- have implemented this i/f -- to auto close resource when no longer required.
try (//open one or multiple AutoCloseable resources)
Objective ---To confirm device independence of Java I/O --- replace File device by Console
i.e --- Read data from console i/p --- in buffered manner till 'stop'  & echo back it on the console.
required stream classes --- BR(ISR(System.in))
Adv. of Scanner over above chain ----- contains ready-made parsing methods(eg --- nextInt,nextDouble.....)
Can combine both approaches.(new Scanner(br.readLine())
Objective --- Combine scanner & buffered reader api --- to avail buffering + parsing api. --- 
BufferedReader provides buffering BUT no simple parsing API. -- supplies br.readLine only
Scanner -- Can be attached to file directly
    //scanner can be attached to string ---Scanner(String s)
// parse data using Scanner API --next,nextInt,nextBoolean
Overloaded constructor of FileReader(File f)
java.io.File ---- class represents path to file / folder 
Does not follow stream class hierarchy, extends Object directly.
File class --- represents abstract path which can refer to file or folder.
Usage --- 1. To access/check file/folder attributes(exists,file or folder,read/w/exec permisssions,path,parent folder,create new empty file,create tmp files & delete them auto upon termination,mkdir,mkdirs,rename,move,size,last modified ,if folder---list entries from folder,filter entries)
if (f1.exists() && f1.isFile() && f1.canRead())
File class API --- boolean exists(),boolean isFile() , boolean canRead()
Objective --- Text File copy operation --- in buffered manner.
For writing data to text file using Buffered streams
java.io.PrintWriter --- char oriented buffered o/p stream --- which can wrap any device.(Binary o/p stream or Char o/p stream)
PrintWriter(Writer w) --- no auto flushing,no conversion, only buffering
PrintWriter(Writer w, boolean flushOnNewLine)--- automatically flush buffer contents on to the writer stream --upon new line 
PrintWriter(OutputStream  w) --- can wrap binary o/p stream -- buffering +conversion(char-->binary),no auto-flush option
PrintWriter(OutputStream w , boolean flushOnNewLine) --- 
API Methods----print/println/printf same as in PrintStream class(same type as System.out)
Stream class which represents --- Char o/p stream connected to Text file. --- java.io.FileWriter
FileWriter(String fileName) throws IOException -- new file will be created & data will be written in char format.
FileWriter(String fileName,boolean append) --- if append is true , data will be appended to existing text file.
Item -- code(String-Prim key),desc,category,quantity,price,shipmentDate
Create suitable collection of Items(HashMap) --- sort map as per desc item code ,& store sorted item dtls in  1 text file . 
NOTE : individual item rec MUST be written on separate line.
Sort items as shipment Date  & store sorted dtls in another file . Before exiting ensure closing of data strms .
Objective -- Restore collection of items created in above requirement ---in form of HashMap .  -- buffering is optional.
Classes --- FileInputStream -- unbuffered bin i/p stream connected to bin file device.
FileOutputStream --unbuffered bin o/p stream connected to bin file device.
But these classes --- dont provide buffering & have only read() write() methods in units of bytes/byte[]
Will try to read 1 byte from the stream. 
2. int read(byte[] bytes) throws IOException
Will try to read data from underlying stream.
10 bytes available -no =10;bytes[0]-----bytes[9]
110 bytes available -- no=100;bytes[0]....bytes[99]
3. int read(byte[] bytes,int offset,int maxNoOfBytes) throws IOException
Will try to read data from underlying stream.
5 bytes available --no=5;bytes[10].....bytes[14]
110 bytes available -- no=15;bytes[10]..bytes[24]
Returns no of available bytes in the stream
1. public void write(int byte) throws IOException
2. public void write(byte[] bytes) throws IOException
3. public void write(byte[] bytes,int offset,int maxNo) throws IOException
bytes[offset].....bytes[offset+maxNo-1] -- written out to stream
Using BIS(BufferedInputStream) -- enables buffering BUT doesn't provide any advanced API(ie. read(), read(byte[]), read(byte[] b,int off,int len) . Same is true with BOS.(BufferedOutputStream)
Create Customer/Account based collection. Sort if reqd.
Store Sorted collection to bin file in buffered manner -- 
java.io.DataOutputStream ---implements DataOutput i/f
(converter stream )   prim types / string ---> binary
Constructor -- DataOutputStream (OutputStream out)
public void writeChar(char i) throws IOExc
public void writeUTF(String s) throws IOExc ---uses Modified UTF 8 convention
public void writeChars(String s) throws IOExc --- uses UTF16 convention
Item -- code(String-Prim key),desc,category,quantity,price,shipmentDate
Customer data is already stored in bin file.
Read customer data from Bin file --- in buffered manner & upload the same in HM .display customer details.
Stream class --- java.io.DataInputStream -- implements DataInput
Conversion stream(converts from bin ---> prim type or String)
public double readDouble() throws IOException
public char readChar() throws IOException
public String readUTF() throws IOException(must be used with writeUTF)
public String readChars() throws IOException(must be used with writeChars)
Binary streams which can read/write data from/to binary stream in units of Object/Collection of Object refs (i.e Data Transfer Unit = Object/Collection of Objects)
Stream Class for writing Objects to bin. stream
java.io.ObjectOutputStream implements DataOutput,ObjectOutput
Description --- ObjectOutputStream class performs serialization.
serialization= extracting state of object & converting it in binary form.
state of object = non-static & non-transient data members
out--- dest Binary o/p stream  --- where serialized data stream has to be sent.
public void writeChar(char i) throws IOExc
public void writeUTF(String s) throws IOExc ---uses Modified UTF 8 convention
public void writeObject(Object o) throws IOException,NotSerializableException
De-serialization---- conversion or re-construction of Java objs from bin stream.
java.io.ObjectInputStream  --- performs de-serialization.--- implements DataInput,ObjectInput
Constructor --- ObjectInputStream(InputStream in) 
readInt,readShort,readUTF,readChars..... +
public Object readObject() throws IOException
Objective --- attach OIS to the bin file using FIS & display customer data.
Confirming concepts of serialization & de-serialization
Emp -- int id, String name,double salary,Address adr;
Objective -- Understanding Set & its implementation classes
(store customer info & Items to be purchased)
Data members - int no,Customer info, AL<Item>, Date creationDate
